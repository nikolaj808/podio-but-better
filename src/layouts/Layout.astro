---
import { ModeToggle } from "@/components/mode-toggle";
import { Button } from "@/components/ui/button";
import { UserAvatar } from "@/components/user-avatar";
import "@/styles/globals.css";

import { ViewTransitions } from "astro:transitions";
import { CalendarPlus } from "lucide-react";
interface Props {
  title: string;
}

const { title } = Astro.props;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content="Astro description" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
    <ViewTransitions />
  </head>
  <body
    transition:animate="slide"
    transition:persist
    class="flex h-full flex-1 flex-col space-y-8 p-8"
  >
    <header
      style="margin-top: 0px !important;"
      class="flex items-center justify-between"
    >
      <div>
        <slot name="header-title" />
      </div>
      <div
        class="max-h-8 flex items-center space-x-4"
        transition:animate="none"
        transition:persist
      >
        <div>
          <ModeToggle client:only />
        </div>
        <div>
          <UserAvatar client:only />
        </div>
      </div>
    </header>
    <slot />
    <script is:inline>
      const getTheme = () => {
        if (
          typeof localStorage !== "undefined" &&
          localStorage.getItem("theme")
        ) {
          return localStorage.getItem("theme");
        }
        if (window.matchMedia("(prefers-color-scheme: dark)").matches) {
          return "dark";
        }
        return "light";
      };

      const setTheme = (theme) => {
        if (theme === "light") {
          document.documentElement.classList.remove("dark");
        } else {
          document.documentElement.classList.add("dark");
        }
        window.localStorage.setItem("theme", theme);
      };

      setTheme(getTheme());

      document.addEventListener("astro:after-swap", () => setTheme(getTheme()));
    </script>
  </body>
</html>
